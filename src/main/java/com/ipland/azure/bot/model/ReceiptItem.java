/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ipland.azure.bot.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * An item on a receipt card
 */
@ApiModel(description = "An item on a receipt card")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-01-31T17:19:19.373+02:00")
public class ReceiptItem {
  @JsonProperty("title")
  private String title = null;

  @JsonProperty("subtitle")
  private String subtitle = null;

  @JsonProperty("text")
  private String text = null;

  @JsonProperty("image")
  private CardImage image = null;

  @JsonProperty("price")
  private String price = null;

  @JsonProperty("quantity")
  private String quantity = null;

  @JsonProperty("tap")
  private CardAction tap = null;

  public ReceiptItem title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the Card
   * @return title
  **/
  @ApiModelProperty(value = "Title of the Card")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ReceiptItem subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

   /**
   * Subtitle appears just below Title field, differs from Title in font styling only
   * @return subtitle
  **/
  @ApiModelProperty(value = "Subtitle appears just below Title field, differs from Title in font styling only")
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }

  public ReceiptItem text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Text field appears just below subtitle, differs from Subtitle in font styling only
   * @return text
  **/
  @ApiModelProperty(value = "Text field appears just below subtitle, differs from Subtitle in font styling only")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public ReceiptItem image(CardImage image) {
    this.image = image;
    return this;
  }

   /**
   * Image
   * @return image
  **/
  @ApiModelProperty(value = "Image")
  public CardImage getImage() {
    return image;
  }

  public void setImage(CardImage image) {
    this.image = image;
  }

  public ReceiptItem price(String price) {
    this.price = price;
    return this;
  }

   /**
   * Amount with currency
   * @return price
  **/
  @ApiModelProperty(value = "Amount with currency")
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }

  public ReceiptItem quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Number of items of given kind
   * @return quantity
  **/
  @ApiModelProperty(value = "Number of items of given kind")
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }

  public ReceiptItem tap(CardAction tap) {
    this.tap = tap;
    return this;
  }

   /**
   * This action will be activated when user taps on the Item bubble.
   * @return tap
  **/
  @ApiModelProperty(value = "This action will be activated when user taps on the Item bubble.")
  public CardAction getTap() {
    return tap;
  }

  public void setTap(CardAction tap) {
    this.tap = tap;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiptItem receiptItem = (ReceiptItem) o;
    return Objects.equals(this.title, receiptItem.title) &&
        Objects.equals(this.subtitle, receiptItem.subtitle) &&
        Objects.equals(this.text, receiptItem.text) &&
        Objects.equals(this.image, receiptItem.image) &&
        Objects.equals(this.price, receiptItem.price) &&
        Objects.equals(this.quantity, receiptItem.quantity) &&
        Objects.equals(this.tap, receiptItem.tap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, subtitle, text, image, price, quantity, tap);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiptItem {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    tap: ").append(toIndentedString(tap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

